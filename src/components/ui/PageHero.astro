---
export interface Props {
  title: string;
  subtitle?: string;
  breadcrumbs?: Array<{
    name: string;
    href: string;
  }>;
  stats?: Array<{
    number: string;
    label: string;
  }>;
  backgroundImage?: string;
  theme?: 'dark' | 'light';
  size?: 'small' | 'medium' | 'large';
}

const {
  title,
  subtitle,
  breadcrumbs,
  stats,
  backgroundImage,
  theme = 'dark',
  size = 'medium'
} = Astro.props;

const sizeClasses = {
  small: 'py-12 md:py-16',
  medium: 'py-16 md:py-20',
  large: 'py-20 md:py-24'
};

const bgClass = theme === 'dark' ? 'gradient-dark' : 'bg-ez2fix-cream';
const textClass = theme === 'dark' ? 'text-ez2fix-cream' : 'text-ez2fix-dark';
const accentClass = theme === 'dark' ? 'text-ez2fix-gold' : 'text-ez2fix-primary';
---

<section class={`relative ${sizeClasses[size]} overflow-hidden ${bgClass}`}>
  {backgroundImage && (
    <div class="absolute inset-0">
      <img 
        src={backgroundImage}
        alt=""
        class="w-full h-full object-cover"
        loading="eager"
      />
      <div class="absolute inset-0 bg-black bg-opacity-60"></div>
    </div>
  )}
  
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-4xl mx-auto text-center">
      
      {breadcrumbs && (
        <nav class="flex items-center justify-center space-x-2 text-sm mb-8 text-ez2fix-brown">
          {breadcrumbs.map((crumb, index) => (
            <Fragment>
              {index > 0 && (
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              )}
              {index === breadcrumbs.length - 1 ? (
                <span class={accentClass}>{crumb.name}</span>
              ) : (
                <a href={crumb.href} class="hover:underline">{crumb.name}</a>
              )}
            </Fragment>
          ))}
        </nav>
      )}
      
      <h1 class={`text-4xl md:text-5xl lg:text-6xl font-bold leading-tight mb-6 ${textClass}`} set:html={title} />
      
      {subtitle && (
        <p class={`text-xl md:text-2xl leading-relaxed max-w-3xl mx-auto mb-8 ${theme === 'dark' ? 'text-ez2fix-gold' : 'text-ez2fix-brown'}`} set:html={subtitle} />
      )}
      
      {stats && (
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 max-w-2xl mx-auto">
          {stats.map((stat) => (
            <div class={`text-center p-4 rounded-lg ${theme === 'dark' ? 'bg-white/10' : 'bg-ez2fix-primary/10'}`}>
              <div class={`text-2xl md:text-3xl font-bold mb-1 ${accentClass}`}>
                {stat.number}
              </div>
              <div class={`text-sm md:text-base ${theme === 'dark' ? 'text-ez2fix-cream' : 'text-ez2fix-brown'}`}>
                {stat.label}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>
</section>