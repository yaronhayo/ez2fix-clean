---
import { siteConfig } from '@/config/site';
import CTA from '@/components/ui/CTA.astro';

export interface Props {
  variant?: 'hero' | 'inline' | 'modal';
  title?: string;
  subtitle?: string;
  buttonText?: string;
  service?: string;
  location?: string;
}

const {
  variant = 'inline',
  title = 'Get Your Free Estimate',
  subtitle = 'Tell us about your garage door issue and we\'ll provide an honest, detailed estimate.',
  buttonText = 'Get My Free Estimate',
  service = '',
  location = ''
} = Astro.props;

const services = [
  "24/7 Emergency Repair",
  "Spring Repair",
  "Smart Opener Installation", 
  "New Door Installation",
  "Commercial Service",
  "General Repair",
  "Cable & Track Repair",
  "Maintenance Service",
  "Safety Inspection",
  "Not Sure - Need Diagnosis"
];

const formId = `booking-form-${variant}`;
---

<div class="booking-form-container relative">
  <div class={variant === 'hero' ? 'mb-3' : 'mb-4 md:mb-6'}>
    <h3 class={variant === 'hero' ? 'text-base lg:text-lg font-bold text-ez2fix-dark mb-1' : 'text-lg md:text-xl lg:text-2xl font-bold text-ez2fix-dark mb-2'}>
      {title}
    </h3>
    {subtitle && (
      <p class={variant === 'hero' ? 'text-xs lg:text-sm text-ez2fix-brown' : 'text-sm md:text-base text-ez2fix-brown'}>
        {subtitle}
      </p>
    )}
  </div>
  
  <form class={variant === 'hero' ? 'space-y-3' : 'space-y-4'} id={formId} data-variant={variant}>
    <!-- Name -->
    <div>
      <label for={`name-${variant}`} class={variant === 'hero' ? 'block text-xs font-semibold mb-1 text-ez2fix-dark' : 'block text-sm font-semibold mb-2 text-ez2fix-dark'}>
        Name*
      </label>
      <input 
        type="text" 
        id={`name-${variant}`}
        name="name" 
        required
        class={variant === 'hero' ? 'form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors' : 'form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors'}
        placeholder="Enter your full name"
        aria-describedby={`name-error-${variant}`}
      />
      <div id={`name-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
    </div>

    <!-- Phone -->
    <div>
      <label for={`phone-${variant}`} class={variant === 'hero' ? 'block text-xs font-semibold mb-1 text-ez2fix-dark' : 'block text-sm font-semibold mb-2 text-ez2fix-dark'}>
        Phone Number*
      </label>
      <input 
        type="tel" 
        id={`phone-${variant}`}
        name="phone" 
        required
        class={variant === 'hero' ? 'form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors' : 'form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors'}
        placeholder="(201) 234-5678"
        aria-describedby={`phone-error-${variant}`}
      />
      <div id={`phone-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
    </div>


    <!-- Service Type -->
    <div>
      <label for={`service-${variant}`} class={variant === 'hero' ? 'block text-xs font-semibold mb-1 text-ez2fix-dark' : 'block text-sm font-semibold mb-2 text-ez2fix-dark'}>
        Service Needed*
      </label>
      <select 
        id={`service-${variant}`}
        name="service" 
        required
        class={variant === 'hero' ? 'form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors bg-white' : 'form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors bg-white'}
      >
        <option value="">What can we help with?</option>
        {services.map(serviceOption => (
          <option value={serviceOption} selected={service === serviceOption}>{serviceOption}</option>
        ))}
      </select>
      <div id={`service-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert"></div>
    </div>


    <!-- Address -->
    <div>
      <label for={`address-${variant}`} class={variant === 'hero' ? 'block text-xs font-semibold mb-1 text-ez2fix-dark' : 'block text-sm font-semibold mb-2 text-ez2fix-dark'}>
        Address <span class="text-ez2fix-brown/70">(optional)</span>
      </label>
      <input 
        type="text" 
        id={`address-${variant}`}
        name="address" 
        class={variant === 'hero' ? 'form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors' : 'form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors'}
        placeholder={variant === 'hero' ? 'Address (helps with faster service)...' : 'Address (helps us serve you faster)...'}
        autocomplete="street-address"
      />
      <div id={`address-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert"></div>
      
      {variant === 'hero' && (
        <!-- Compact Zip Code field for Hero variant -->
        <div class="mt-2">
          <label for={`zip-${variant}`} class="block text-xs font-semibold mb-1 text-ez2fix-dark">
            Zip Code
          </label>
          <input 
            type="text" 
            id={`zip-${variant}`}
            name="zip" 
            class="form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors"
            placeholder="Enter 5-digit zip code"
            autocomplete="postal-code"
            pattern="[0-9]{5}(-[0-9]{4})?"
            title="Enter 5-digit zip code"
            aria-describedby={`zip-error-${variant}`}
          />
          <div id={`zip-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
        </div>
      )}
      
      {variant !== 'hero' && (
        <!-- Expanded Address Fields (visible for better UX) -->
        <div id={`address-expanded-${variant}`} class="mt-3 space-y-3">
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 gap-3">
            <div>
              <label for={`city-${variant}`} class="block text-sm font-semibold mb-2 text-ez2fix-dark">
                City
              </label>
              <input 
                type="text" 
                id={`city-${variant}`}
                name="city" 
                class="form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors"
                placeholder="Enter city name"
                autocomplete="address-level2"
              />
            </div>
            <div>
              <label for={`state-${variant}`} class="block text-sm font-semibold mb-2 text-ez2fix-dark">
                State
              </label>
              <input 
                type="text" 
                id={`state-${variant}`}
                name="state" 
                class="form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors"
                placeholder="State"
                autocomplete="address-level1"
                value="NJ"
                readonly
                aria-label="State (New Jersey, read-only)"
              />
            </div>
          </div>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 gap-3">
            <div>
              <label for={`zip-${variant}`} class="block text-sm font-semibold mb-2 text-ez2fix-dark">
                Zip Code
              </label>
              <input 
                type="text" 
                id={`zip-${variant}`}
                name="zip" 
                class="form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors"
                placeholder="Enter 5-digit zip code"
                autocomplete="postal-code"
                pattern="[0-9]{5}(-[0-9]{4})?"
                title="Enter 5-digit zip code"
              />
            </div>
            <div>
              <label for={`unit-${variant}`} class="block text-sm font-semibold mb-2 text-ez2fix-dark">
                Unit/Apt <span class="text-gray-500 font-normal">(optional)</span>
              </label>
              <input 
                type="text" 
                id={`unit-${variant}`}
                name="unit" 
                class="form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors"
                placeholder="Unit or apartment number"
                autocomplete="address-line2"
              />
            </div>
          </div>
        </div>
      )}
    </div>

    <!-- How Soon? -->
    <div>
      <label for={`urgency-${variant}`} class={variant === 'hero' ? 'block text-xs font-semibold mb-1 text-ez2fix-dark' : 'block text-sm font-semibold mb-2 text-ez2fix-dark'}>
        How Soon?*
      </label>
      <select 
        id={`urgency-${variant}`}
        name="urgency" 
        required
        class={variant === 'hero' ? 'form-input w-full px-3 py-2 text-sm border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors bg-white' : 'form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors bg-white'}
      >
        <option value="">When do you need service?</option>
        <option value="asap">ASAP</option>
        <option value="today">Today if possible</option>
        <option value="few-days">Within a few days</option>
        <option value="few-weeks">Within a few weeks</option>
        <option value="browsing">Not sure / Just browsing</option>
      </select>
      <div id={`urgency-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert"></div>
    </div>

    {variant !== 'hero' && (
      <!-- Service Description & Needs Assessment -->
      <div>
        <label for={`notes-${variant}`} class="block text-sm font-semibold mb-2 text-ez2fix-dark">
          Service Description & Needs Assessment
        </label>
        <textarea 
          id={`notes-${variant}`}
          name="notes" 
          class="form-input w-full px-4 py-3 border-2 border-ez2fix-brown/30 rounded-lg focus:border-ez2fix-primary focus:outline-none transition-colors min-h-[100px] resize-vertical"
          placeholder="Please describe your garage door issue: What's not working? Any unusual sounds? When did the problem start? Any safety concerns? This helps us prepare for your appointment..."
        ></textarea>
        <div class="text-xs text-ez2fix-brown mt-1">
          💡 Detailed descriptions help our technicians bring the right parts and tools to complete your service in one visit
        </div>
      </div>

      <!-- Contact Preference Selection -->
      <div>
        <label class="block text-sm font-semibold mb-2 text-ez2fix-dark">
          Preferred Contact Method*
        </label>
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-2">
          <div class="flex items-center space-x-2">
            <input 
              type="radio" 
              id={`contact-phone-${variant}`}
              name="contactPreference" 
              value="phone"
              required
              class="h-4 w-4 text-ez2fix-primary focus:ring-ez2fix-primary focus:ring-2"
              checked
            />
            <label for={`contact-phone-${variant}`} class="text-sm text-ez2fix-dark">
              📞 Phone Call
            </label>
          </div>
          <div class="flex items-center space-x-2">
            <input 
              type="radio" 
              id={`contact-text-${variant}`}
              name="contactPreference" 
              value="text"
              class="h-4 w-4 text-ez2fix-primary focus:ring-ez2fix-primary focus:ring-2"
            />
            <label for={`contact-text-${variant}`} class="text-sm text-ez2fix-dark">
              💬 Text Message
            </label>
          </div>
          <div class="flex items-center space-x-2">
            <input 
              type="radio" 
              id={`contact-email-${variant}`}
              name="contactPreference" 
              value="email"
              class="h-4 w-4 text-ez2fix-primary focus:ring-ez2fix-primary focus:ring-2"
            />
            <label for={`contact-email-${variant}`} class="text-sm text-ez2fix-dark">
              📧 Email
            </label>
          </div>
        </div>
        <div id={`contactPreference-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert"></div>
      </div>
    )}

    <!-- Consent Checkbox -->
    <div>
      <div class={variant === 'hero' ? 'flex items-start space-x-2' : 'flex items-start space-x-3'}>
        <input 
          type="checkbox" 
          id={`consent-${variant}`}
          name="consent" 
          required
          class={variant === 'hero' ? 'mt-0.5 h-3 w-3 rounded border-2 border-ez2fix-brown/30 text-ez2fix-primary focus:ring-ez2fix-primary focus:ring-1 focus:ring-offset-1' : 'mt-1 h-4 w-4 rounded border-2 border-ez2fix-brown/30 text-ez2fix-primary focus:ring-ez2fix-primary focus:ring-2 focus:ring-offset-2'}
        />
        <label for={`consent-${variant}`} class={variant === 'hero' ? 'text-xs leading-tight text-ez2fix-dark' : 'text-sm leading-relaxed text-ez2fix-dark'}>
          I agree to receive service updates via call, text, or email, and I accept the 
          <a href="/privacy-policy" class="underline hover:no-underline text-ez2fix-primary" target="_blank">Privacy Policy</a> and 
          <a href="/terms-of-service" class="underline hover:no-underline text-ez2fix-primary" target="_blank">Terms & Conditions</a>.*
        </label>
      </div>
      <div id={`consent-error-${variant}`} class="text-red-600 text-xs mt-1 hidden" role="alert"></div>
    </div>

    <!-- Submit Button -->
    <div class={variant === 'hero' ? 'pt-1' : 'pt-2'}>
      <CTA 
        variant="primary"
        size={variant === 'hero' ? 'small' : 'medium'}
        text={buttonText}
        icon="check"
        class="w-full btn-premium shadow-premium hover-lift"
      />
    </div>
    
    <!-- Hidden reCAPTCHA badge container -->
    <div id="recaptcha-badge" style="display: none; visibility: hidden; opacity: 0; width: 0; height: 0; position: absolute; left: -9999px;"></div>
    
    <p class={variant === 'hero' ? 'text-ez2fix-brown text-center text-xs mt-2' : 'text-ez2fix-brown text-center text-xs mt-3'}>
      * Required fields. We respect your privacy and never share your information. This form is protected by reCAPTCHA and the Google <a href="https://policies.google.com/privacy" class="underline hover:no-underline" target="_blank" rel="noopener">Privacy Policy</a> and <a href="https://policies.google.com/terms" class="underline hover:no-underline" target="_blank" rel="noopener">Terms of Service</a> apply.
    </p>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // reCAPTCHA loading state
    let recaptchaLoaded = false;
    
    // Load reCAPTCHA only when needed (on form interaction)
    async function ensureRecaptchaLoaded() {
      if (recaptchaLoaded) return;
      
      try {
        console.log('Loading reCAPTCHA on demand...');
        const { loadRecaptcha } = await import('@/lib/recaptcha');
        await loadRecaptcha();
        recaptchaLoaded = true;
        console.log('reCAPTCHA loaded successfully on demand');
      } catch (error) {
        console.warn('reCAPTCHA loading failed, forms will work without CAPTCHA protection:', error.message);
      }
    }
    
    const forms = document.querySelectorAll('[id^="booking-form-"]');
    
    forms.forEach(form => {
      const variant = form.dataset.variant;
      
      // Phone formatting
      const phoneInput = form.querySelector(`#phone-${variant}`);
      phoneInput?.addEventListener('input', function() {
        const value = this.value.replace(/\D/g, '');
        if (value.length >= 10) {
          this.value = `(${value.slice(0,3)}) ${value.slice(3,6)}-${value.slice(6,10)}`;
        }
      });
      
      // Address autocomplete setup
      const addressInput = form.querySelector(`#address-${variant}`);
      const addressExpanded = form.querySelector(`#address-expanded-${variant}`);
      
      // Initialize Google Maps address autocomplete with new API
      if (addressInput) {
        setupAddressAutocomplete(addressInput, addressExpanded, variant);
      }
      
      // Clear errors on input and load reCAPTCHA on first interaction
      const inputs = form.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        input.addEventListener('input', function() {
          clearError(this.name, variant);
        });
        
        // Load reCAPTCHA on first focus
        input.addEventListener('focus', ensureRecaptchaLoaded, { once: true, passive: true });
      });
      
      // Form validation and submission
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        
        // Basic validation - Updated for contact preference
        const basicRequired = ['name', 'phone', 'service', 'urgency', 'consent'];
        const fullFormRequired = variant !== 'hero' ? ['contactPreference'] : [];
        const required = [...basicRequired, ...fullFormRequired];
        
        let hasErrors = false;
        required.forEach(field => {
          const value = field === 'consent' ? data[field] : data[field]?.trim();
          if (!value) {
            const fieldName = field === 'contactPreference' ? 'Contact preference' : field.charAt(0).toUpperCase() + field.slice(1);
            showError(field, `${fieldName} is required.`, variant);
            hasErrors = true;
          }
        });
        
        
        // Phone validation
        if (data.phone && !isValidPhone(data.phone.trim())) {
          showError('phone', 'Please enter a valid phone number.', variant);
          hasErrors = true;
        }
        
        if (hasErrors) return;
        
        // Show loading state
        const button = form.querySelector('a[class*="btn"]') || form.querySelector('button');
        const originalText = button.textContent;
        button.innerHTML = '<svg class="animate-spin h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Submitting...';
        button.style.pointerEvents = 'none';
        
        // Get reCAPTCHA token (with proper loading and fallback)
        let recaptchaToken = 'no-recaptcha-configured';
        try {
          const { loadRecaptcha, executeRecaptcha } = await import('@/lib/recaptcha');
          
          // Load reCAPTCHA script first
          await loadRecaptcha();
          console.log('reCAPTCHA loaded successfully');
          
          // Execute reCAPTCHA to get token
          recaptchaToken = await executeRecaptcha('booking_form');
          console.log('reCAPTCHA executed successfully');
        } catch (recaptchaError) {
          console.warn('reCAPTCHA execution failed, proceeding without CAPTCHA protection:', recaptchaError.message);
        }
        
        try {
          // Get address values from all fields
          const addressElement = form.querySelector(`#address-${variant}`);
          const cityElement = form.querySelector(`#city-${variant}`);
          const stateElement = form.querySelector(`#state-${variant}`);
          const zipElement = form.querySelector(`#zip-${variant}`);
          const unitElement = form.querySelector(`#unit-${variant}`);
          
          const addressValue = addressElement?.value?.trim() || data.address?.trim() || '';
          const cityValue = cityElement?.value?.trim() || data.city?.trim() || '';
          const stateValue = stateElement?.value?.trim() || data.state?.trim() || 'NJ';
          const zipValue = zipElement?.value?.trim() || data.zip?.trim() || '';
          const unitValue = unitElement?.value?.trim() || data.unit?.trim() || '';
          
          // Build comprehensive full address - ensure zip code is always included
          let fullAddress = addressValue;
          
          // If individual components are filled but not in main address, add them
          if (cityValue && !addressValue.toLowerCase().includes(cityValue.toLowerCase())) {
            fullAddress += `, ${cityValue}`;
          }
          
          if (stateValue && !fullAddress.toLowerCase().includes(stateValue.toLowerCase())) {
            fullAddress += `, ${stateValue}`;
          }
          
          // Always ensure zip code is included (most important for lead notifications)
          if (zipValue && !fullAddress.includes(zipValue)) {
            fullAddress += ` ${zipValue}`;
          }
          
          // Add unit/apartment if specified
          if (unitValue && !fullAddress.toLowerCase().includes('unit') && !fullAddress.toLowerCase().includes('apt')) {
            fullAddress += `, Unit ${unitValue}`;
          }
          
          // Clean up any duplicate commas or spaces
          fullAddress = fullAddress.replace(/,\s*,/g, ',').replace(/\s+/g, ' ').trim();
          
          // Fallback: If we still don't have a complete address, try to parse from main field
          if (!zipValue && addressValue) {
            const zipMatch = addressValue.match(/\b(\d{5}(-\d{4})?)\b/);
            if (!zipMatch) {
              // Address might be incomplete - warn user
              console.warn('No zip code found in address:', fullAddress);
            }
          }
          
          console.log('Full address being submitted:', fullAddress);
          console.log('Submitting form data to /api/booking');
          const response = await fetch('/api/booking', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              name: data.name.trim(),
              phone: data.phone.trim(),
              address: fullAddress,
              city: cityValue,
              state: stateValue,
              zip: zipValue,
              unit: unitValue,
              service: data.service,
              urgency: data.urgency || 'browsing',
              description: data.notes?.trim() || '',
              contactPreference: data.contactPreference || 'phone',
              recaptchaToken,
              consent: data.consent,
              source: 'website_form'
            })
          });
          
          if (response.ok) {
            console.log('Form submitted successfully, redirecting to thank-you page');
            window.location.href = '/thank-you';
          } else {
            const errorData = await response.json();
            console.error('API response error:', errorData);
            throw new Error(errorData.error || 'Submission failed');
          }
        } catch (error) {
          console.error('Form submission error:', error);
          alert('Sorry, there was an error submitting your request. Please try again or call us directly at (201) 554-6769');
          button.innerHTML = originalText;
          button.style.pointerEvents = 'auto';
        }
      });
    });
    
    async function setupAddressAutocomplete(addressInput, addressExpanded, variant) {
      // Try to initialize Google Maps address autocomplete with new API
      try {
        const { initializeGoogleMaps, setupAddressAutocomplete } = await import('@/lib/maps');
        
        // Initialize Google Maps if not already loaded
        console.log('🌍 Initializing Google Maps for address autocomplete...');
        await initializeGoogleMaps();
        console.log('✅ Google Maps initialized successfully');
        
        // Set up address autocomplete with service area restrictions
        const autocomplete = setupAddressAutocomplete(addressInput, {
          restrictToServiceArea: true,
          onPlaceSelected: (place) => {
            console.log('📍 Address selected:', place.formatted_address);
            
            if (place.formatted_address) {
              // Fill in additional fields if they exist
              if (addressExpanded) {
                addressExpanded.classList.remove('hidden');
                fillAddressComponents(place, variant);
              }
              
              // Add visual feedback
              addressInput.style.borderColor = '#10b981'; // Green border
              setTimeout(() => {
                addressInput.style.borderColor = '';
              }, 2000);
            }
          }
        });
        
        console.log('✅ Google Maps address autocomplete enabled');
        
        // Show expanded fields on focus (for variants that have them initially hidden)
        addressInput.addEventListener('focus', () => {
          if (addressExpanded && addressExpanded.classList.contains('hidden')) {
            addressExpanded.classList.remove('hidden');
          }
        });
        
      } catch (error) {
        console.warn('⚠️ Google Maps autocomplete unavailable:', error.message);
        console.log('🔄 Falling back to manual address input...');
        
        // Add visual indicator that manual input is required
        const fallbackIndicator = document.createElement('div');
        fallbackIndicator.innerHTML = 'ℹ️ Type your full address manually';
        fallbackIndicator.className = 'text-xs text-blue-600 mt-1';
        addressInput.parentNode.appendChild(fallbackIndicator);
        
        setupManualAddressParsing(addressInput, addressExpanded, variant);
      }
    }
    
    function fillAddressComponents(place, variant) {
      const form = document.querySelector(`#booking-form-${variant}`);
      if (!form) return;
      
      const addressInput = form.querySelector(`#address-${variant}`);
      const cityInput = form.querySelector(`#city-${variant}`);
      const stateInput = form.querySelector(`#state-${variant}`);
      const zipInput = form.querySelector(`#zip-${variant}`);
      
      console.log('Filling address components from Google Places:', place);
      
      // Parse address components using traditional API
      if (place.address_components) {
        let streetNumber = '';
        let route = '';
        let city = '';
        let state = '';
        let zipCode = '';
        
        place.address_components.forEach(component => {
          const types = component.types;
          
          if (types.includes('street_number')) {
            streetNumber = component.long_name;
          } else if (types.includes('route')) {
            route = component.long_name;
          } else if (types.includes('locality')) {
            city = component.long_name;
          } else if (types.includes('administrative_area_level_1')) {
            state = component.short_name;
          } else if (types.includes('postal_code')) {
            zipCode = component.long_name;
          }
        });
        
        // Build complete street address with city, state, zip for main field
        if (streetNumber && route && addressInput) {
          let fullStreetAddress = `${streetNumber} ${route}`;
          
          // Add city, state, zip to main address field for complete display
          if (city) fullStreetAddress += `, ${city}`;
          if (state) fullStreetAddress += `, ${state}`;
          if (zipCode) fullStreetAddress += ` ${zipCode}`;
          
          addressInput.value = fullStreetAddress;
        }
        
        // Fill individual fields
        if (city && cityInput) {
          cityInput.value = city;
          console.log('City filled:', city);
        }
        
        if (state && stateInput) {
          stateInput.value = state;
          console.log('State filled:', state);
        }
        
        if (zipCode && zipInput) {
          zipInput.value = zipCode;
          console.log('Zip code filled:', zipCode);
        }
        
        console.log('Address components filled - Street:', addressInput?.value, 'City:', city, 'State:', state, 'Zip:', zipCode);
      } else {
        console.warn('No address_components found in Google Places result');
      }
    }
    
    function setupManualAddressParsing(addressInput, addressExpanded, variant) {
      console.log('Using manual address input (Google Maps autocomplete unavailable)');
      
      // Setup manual address expansion on focus (for variants that have them initially hidden)
      addressInput.addEventListener('focus', () => {
        if (addressExpanded && addressExpanded.classList.contains('hidden')) {
          addressExpanded.classList.remove('hidden');
        }
      });
      
      // Enhanced manual address parsing fallback
      addressInput?.addEventListener('input', function() {
        const value = this.value.trim();
        if (value.length > 10 || value.includes(',')) {
          // Show expanded fields when user starts typing a substantial address (if they're hidden)
          if (addressExpanded && addressExpanded.classList.contains('hidden')) {
            addressExpanded.classList.remove('hidden');
          }
          
          const form = addressInput.closest('form');
          const cityInput = form.querySelector(`#city-${variant}`);
          const stateInput = form.querySelector(`#state-${variant}`);
          const zipInput = form.querySelector(`#zip-${variant}`);
          
          // Enhanced parsing for different address formats
          if (value.includes(',')) {
            // Format: "123 Main St, Fair Lawn, NJ 07410"
            const parts = value.split(',').map(part => part.trim());
            
            if (parts.length >= 2) {
              // Extract city from second-to-last part
              if (parts.length >= 2 && cityInput && !cityInput.value) {
                cityInput.value = parts[1];
              }
              
              // Extract state and zip from last part
              const lastPart = parts[parts.length - 1];
              const stateZipMatch = lastPart.match(/([A-Z]{2})\s+(\d{5}(-\d{4})?)/i);
              const zipOnlyMatch = lastPart.match(/\b(\d{5}(-\d{4})?)\b/);
              
              if (stateZipMatch) {
                // Found "NJ 07410" pattern
                if (stateInput && !stateInput.value) {
                  stateInput.value = stateZipMatch[1].toUpperCase();
                }
                if (zipInput && !zipInput.value) {
                  zipInput.value = stateZipMatch[2];
                }
              } else if (zipOnlyMatch && zipInput && !zipInput.value) {
                // Found zip code only
                zipInput.value = zipOnlyMatch[1];
                // Try to extract city from remaining text
                const cityPart = lastPart.replace(zipOnlyMatch[0], '').replace(/\s*NJ\s*/i, '').trim();
                if (cityPart && cityInput && !cityInput.value) {
                  cityInput.value = cityPart;
                }
              }
            }
          } else {
            // Single line format: try to extract zip code
            const zipMatch = value.match(/\b(\d{5}(-\d{4})?)\b/);
            if (zipMatch && zipInput && !zipInput.value) {
              zipInput.value = zipMatch[1];
              console.log('Extracted zip code from single address line:', zipMatch[1]);
            }
          }
          
          console.log('Manual address parsing - Address:', value, 'City:', cityInput?.value, 'State:', stateInput?.value, 'Zip:', zipInput?.value);
        }
      });
    }
    
    function showError(field, message, variant) {
      const errorEl = document.getElementById(`${field}-error-${variant}`);
      const inputEl = document.getElementById(`${field}-${variant}`);
      if (errorEl && inputEl) {
        errorEl.textContent = message;
        errorEl.classList.remove('hidden');
        inputEl.style.borderColor = '#ef4444';
        inputEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
    
    function clearError(field, variant) {
      const errorEl = document.getElementById(`${field}-error-${variant}`);
      const inputEl = document.getElementById(`${field}-${variant}`);
      if (errorEl && inputEl) {
        errorEl.classList.add('hidden');
        inputEl.style.borderColor = '';
      }
    }
    
    function isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
    
    function isValidPhone(phone) {
      const cleaned = phone.replace(/\D/g, '');
      return cleaned.length === 10;
    }
  });
</script>