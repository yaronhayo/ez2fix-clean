---
import { siteConfig } from '@/config/site';

export interface Props {
  pageType?: 'website' | 'service' | 'contact' | 'about';
  serviceName?: string;
  serviceDescription?: string;
  serviceUrl?: string;
}

const {
  pageType = 'website',
  serviceName,
  serviceDescription,
  serviceUrl
} = Astro.props;

// Service-specific schema - references the main business schema from BaseLayout
// This prevents duplicate LocalBusiness entities which violate schema.org guidelines
const serviceSchema = serviceName ? {
  "@context": "https://schema.org",
  "@type": "Service",
  "@id": `${siteConfig.url}${serviceUrl}#service`,
  "name": serviceName,
  "description": serviceDescription,
  "provider": {
    "@id": `${siteConfig.url}#business`
  },
  "areaServed": siteConfig.business.serviceAreas.map(area => ({
    "@type": "City",
    "name": area,
    "containedInPlace": {
      "@type": "State",
      "name": "New Jersey"
    }
  })),
  "serviceType": serviceName,
  "offers": {
    "@type": "Offer",
    "availability": "https://schema.org/InStock",
    "priceRange": "$$",
    "areaServed": siteConfig.business.serviceAreas
  }
} : null;

// WebSite schema for search box markup
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "@id": `${siteConfig.url}#website`,
  "url": siteConfig.url,
  "name": siteConfig.name,
  "description": siteConfig.description,
  "publisher": {
    "@id": `${siteConfig.url}#business`
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": {
      "@type": "EntryPoint",
      "urlTemplate": `${siteConfig.url}/services?q={search_term_string}`
    },
    "query-input": "required name=search_term_string"
  }
};
---

<!-- Service-specific Schema Markup -->
{serviceSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(serviceSchema)} />
)}

<!-- Website Schema for Search -->
{pageType === 'website' && (
  <script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />
)}